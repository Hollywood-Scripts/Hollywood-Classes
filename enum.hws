/*
** Enum.hws
**
** an Enumeration class
** by Samuel D. Crow
**
** See LICENSE file for copyright details
*/
@IF #CLASS<>True
	@ERROR "Must @INCLUDE \"class.hws\" before including enum.hws"
@ENDIF

Const #ENUM=True

Global Enum=New("enumeration")
Enum.Interface("Enumerable", {"Iteratable"}, "GetEnum")

Switch(GetSystemLanguage())
Case #LANGUAGE_ENGLISH:
	FallThrough
Default:
	Enum["_error"]={
		"TableRequired"=Function()
			Error("Table required")
		EndFunction
	}
EndSwitch
/*
** Add items to the current enumeration
*/
Enum:Method("Append", {}, Function(self, ...)
	Local ending = self._end+arg.n
	Local starting = self._end+1
	For Local count = starting To ending
		self:Member(arg[count-starting], count)
	Next
	self["_end"] = ending
EndFunction)

/*
** Create child enumeration of existing one
*/
Enum:Method("Extend", {}, Function(self, name, ...)
	Local tbl = self:DoParentMethod("Extend", name) ;no added interfaces
	tbl:DoMethod("Append", Unpack(arg))
	Return(tbl)
EndFunction)

/*
** Initializes a new enumeration
**
** Notes:  It is recommended to leave the start parameter at the default for
** most occasions and set the first value to indicate an uninitialized state.
*/
Enum:Method("Init", {starting=0}, Function(self, name, param)
	If GetType(param) <> #TABLE Then Enum:_error.TableRequired()
	Local tbl = Enum:Extend(name),
		EndEnum = TableItems(param)-1,
		s = RawGet(param, "starting"), r$
	;alternate starting point indicated
	If s
		starting = s
		; starting represents a param entry so decrement by one to compensate
		EndEnum = EndEnum+s-1
	EndIf
	tbl:Member("_start", starting)
	tbl:Member("_end", endenum)
	For Local count = starting To EndEnum
		r$=arg[count-starting]
		If LeftStr(r$, 1)="_"
			_class._error.Underscore(name)
		EndIf
		tbl:Member(r$, count)
		tbl:Member(count, r$)
	Next
	Return(tbl)
EndFunction)

/*
** Enum getter
*/
Enum:Method("GetEnum", {}, Function(self, key)
	Return self:Get(key)
EndFunction)

/*
** Start iterator
*/
Enum:Method("Start", {}, Function(self)
	Local iter={}
	iter["value"]=self:Get("_start")
	iter["_end"]=self:Get("_end")
	Return iter
EndFunction)

/*
** Get next iteration
*/
Enum:Method("GetNext", {}, Function(self, iter)
	iter.value=iter.value+1
	If iter.value > iter._end Then iter=Nil
	Return iter
EndFunction)

/*
** Outputs the contents of an enumeration class to the debug output
*/
Enum:Method("Dump", {}, Function(self)
	DebugPrint("end=" .. self:Get("_end"))
	DebugPrint("start=" .. self:Get("_start"))
	DebugPrint("data={")
	Local i=self:Start()
	While i
		DebugPrint("  " .. i.value .. "=" .. self:GetEnum(i.value))
		i.GetNext()
	Wend
	DebugPrint("}")
EndFunction)

