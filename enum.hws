/*
** Enum()
**
** by Samuel D. Crow
*/
Global Enum={} ; Allocate the table for the interface
Enum._v={} ; Allocate vtable for class methods

/*
** New()
**
** Initializes a new enumeration
**
** Notes:  It is recommended to have 0 as the start parameter for most occasions
**    and set it to indicate an uninitialized value has been used.
**
**    
*/
Function Enum.New(starting, ...)
	Local tbl = CopyTable(Enum._v) ; Instatiate base class
	tbl["_start"] = starting
	tbl["_end"] = starting+arg.n-1
	tbl["_body"]={}
	For Local count = starting To tbl._end Do tbl._body[arg[count-starting]] = count
	Return(tbl)
EndFunction

/*
** Dump()
**
** Outputs the contents of an enumeration class to the debug output
*/
Function Enum._v.dump(self)
	DebugPrint("_start=" .. self._start)
	DebugPrint("_end=" .. self._end)
	DebugPrint("_body={")
	For i,j In Pairs(self._body)
		DebugPrint("  " .. i .. "=" .. j)
	Next
	DebugPrint("}")
EndFunction

/*
** Append()
**
** Add items to the current enumeration
*/
Function Enum._v.append(self, ...)
	Local ending = self._end+arg.n
	Local starting = self._end+1
	For Local count = starting To ending Do self._body[arg[count-starting]] = count
	self["_end"] = ending
EndFunction

/*
** Extend()
**
** Create child enumeration of existing one
*/
Function Enum._v.extend(self, ...)
	Local tbl = CopyTable(self)
	tbl:append(Unpack(arg))
	Return(tbl)
EndFunction
